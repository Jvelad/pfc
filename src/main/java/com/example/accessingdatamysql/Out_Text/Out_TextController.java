package com.example.accessingdatamysql.Out_Text;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/out_text") // This means URL's start with /demo (after Application path)

public class Out_TextController {

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private Out_TextRepository out_textRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewOut_text(
		  @RequestParam int id,
		  @RequestParam int lang_id,		  
		  @RequestParam String intl_id,
		  @RequestParam String text
		  ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Out_Text l = new Out_Text();
    l.setId(id);
    l.setLang_id(lang_id);
    l.setIntl_id(intl_id);
    l.setText(text);
    out_textRepository.save(l);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Out_Text> getAllOut_Text() {
    // This returns a JSON or XML with the users
    return out_textRepository.findAll();
  }
  
}